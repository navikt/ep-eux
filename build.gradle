buildscript {
    ext {
        springVersion = '5.3.18'
        junitVersion = '5.8.2'
        prometheusVersion = '1.8+'
        kotlinVersion = '1.6.10'
        mockkVersion = '1.12.3'
        jacksonVersion = '2.13.2'
        epMetricsVersion = '0.4.17'
        epLoggingVersion = '1.0.17'
    }

    repositories {
        mavenCentral()
    }
}

plugins {
    id("java-library")
    id("maven-publish")
    id("org.jetbrains.kotlin.jvm") version "1.6.10"
    id("net.researchgate.release") version "2.8.1"
    id("com.adarshr.test-logger") version "3.2.0"
    id("org.jetbrains.kotlin.plugin.spring") version "1.6.10"
    id("com.github.ben-manes.versions") version "0.42.0"
    id("se.patrikerdes.use-latest-versions") version "0.2.18"
    id("org.owasp.dependencycheck") version "7.0.1"
    id("io.snyk.gradle.plugin.snykplugin") version "0.4"
}

assert JavaVersion.current().isJava11Compatible(): "Java 11 or newer is required"

group = "no.nav.eessi.pensjon"

java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "11"
    }
}

dependencies {
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("no.nav.eessi.pensjon:ep-metrics:$epMetricsVersion")
    implementation("no.nav.eessi.pensjon:ep-logging:$epLoggingVersion")

    implementation("io.micrometer:micrometer-registry-prometheus:$prometheusVersion")
    // Spring
    implementation("org.springframework:spring-web:$springVersion")
    implementation("org.slf4j:slf4j-api:1.7.33")
    //Jackson json
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    // Test
    testImplementation("org.skyscreamer:jsonassert:1.5.0")
    testImplementation("org.springframework:spring-test:$springVersion")
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    testImplementation("io.mockk:mockk:$mockkVersion")

    // Architecture tests
    testImplementation ("com.tngtech.archunit:archunit:0.22.0")
}

// https://github.com/researchgate/gradle-release
release {
    newVersionCommitMessage = "[Release Plugin] - next version commit: "
    tagTemplate = "release-\${version}"
}

// https://help.github.com/en/actions/language-and-framework-guides/publishing-java-packages-with-gradle#publishing-packages-to-github-packages
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/navikt/$rootProject.name"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

repositories {
    mavenCentral()

    ["maven-release","ep-logging","ep-metrics"].each { repo ->
        String token = System.getenv("GITHUB_TOKEN") ?: project.findProperty("gpr.key")
        if (!token) throw new NullPointerException("Missing token, you have to set GITHUB_TOKEN or gpr.key, see README")
        maven {
            url = uri("https://maven.pkg.github.com/navikt/$repo")
            credentials {
                username = "token"
                password = token
            }
        }
    }
}


/* https://github.com/ben-manes/gradle-versions-plugin */
dependencyUpdates {
    rejectVersionIf {
        ['alpha', 'beta', 'b', 'rc', 'cr', 'm', 'preview', 'pr']
                .any { qualifier -> it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/}
    }
    revision = 'release'
}